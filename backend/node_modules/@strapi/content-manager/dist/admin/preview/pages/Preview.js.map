{"version":3,"file":"Preview.js","sources":["../../../../admin/src/preview/pages/Preview.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  useQueryParams,\n  useRBAC,\n  createContext,\n  Form as FormContext,\n  Blocker,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  FocusTrap,\n  IconButton,\n  Portal,\n  SingleSelect,\n  SingleSelectOption,\n} from '@strapi/design-system';\nimport { ArrowLineLeft } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetPreviewUrl } from '../../../../shared/contracts/preview';\nimport { COLLECTION_TYPES } from '../../constants/collections';\nimport { DocumentRBAC } from '../../features/DocumentRBAC';\nimport { type UseDocument, useDocument } from '../../hooks/useDocument';\nimport { type EditLayout, useDocumentLayout } from '../../hooks/useDocumentLayout';\nimport { FormLayout } from '../../pages/EditView/components/FormLayout';\nimport { buildValidParams } from '../../utils/api';\nimport { createYupSchema } from '../../utils/validation';\nimport { PreviewHeader } from '../components/PreviewHeader';\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { UID } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Constants\n * -----------------------------------------------------------------------------------------------*/\n\nconst DEVICES = [\n  {\n    name: 'desktop',\n    label: {\n      id: 'content-manager.preview.device.desktop',\n      defaultMessage: 'Desktop',\n    },\n    width: '100%',\n    height: '100%',\n  },\n  {\n    name: 'mobile',\n    label: {\n      id: 'content-manager.preview.device.mobile',\n      defaultMessage: 'Mobile',\n    },\n    width: '375px',\n    height: '667px',\n  },\n];\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PreviewContextValue {\n  url: string;\n  title: string;\n  document: NonNullable<ReturnType<UseDocument>['document']>;\n  meta: NonNullable<ReturnType<UseDocument>['meta']>;\n  schema: NonNullable<ReturnType<UseDocument>['schema']>;\n  layout: EditLayout;\n  onPreview: () => void;\n}\n\nconst [PreviewProvider, usePreviewContext] = createContext<PreviewContextValue>('PreviewPage');\n\n/* -------------------------------------------------------------------------------------------------\n * PreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst AnimatedArrow = styled(ArrowLineLeft)<{ $isSideEditorOpen: boolean }>`\n  will-change: transform;\n  rotate: ${(props) => (props.$isSideEditorOpen ? '0deg' : '180deg')};\n  transition: rotate 0.2s ease-in-out;\n`;\n\nconst PreviewPage = () => {\n  const location = useLocation();\n  const { formatMessage } = useIntl();\n\n  const iframeRef = React.useRef<HTMLIFrameElement>(null);\n  const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);\n\n  // Read all the necessary data from the URL to find the right preview URL\n  const {\n    slug: model,\n    id: documentId,\n    collectionType,\n  } = useParams<{\n    slug: UID.ContentType;\n    id: string;\n    collectionType: string;\n  }>();\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    status?: string;\n  }>();\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const [deviceName, setDeviceName] = React.useState<(typeof DEVICES)[number]['name']>(\n    DEVICES[0].name\n  );\n  const device = DEVICES.find((d) => d.name === deviceName) ?? DEVICES[0];\n\n  if (!collectionType) {\n    throw new Error('Could not find collectionType in url params');\n  }\n\n  if (!model) {\n    throw new Error('Could not find model in url params');\n  }\n\n  // Only collection types must have a documentId\n  if (collectionType === COLLECTION_TYPES && !documentId) {\n    throw new Error('Could not find documentId in url params');\n  }\n\n  const previewUrlResponse = useGetPreviewUrlQuery({\n    params: {\n      contentType: model,\n    },\n    query: {\n      documentId,\n      locale: params.locale,\n      status: params.status as GetPreviewUrl.Request['query']['status'],\n    },\n  });\n  const documentResponse = useDocument({\n    model,\n    collectionType,\n    documentId,\n    params,\n  });\n  const documentLayoutResponse = useDocumentLayout(model);\n\n  const isLoading =\n    previewUrlResponse.isLoading || documentLayoutResponse.isLoading || documentResponse.isLoading;\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  const initialValues = documentResponse.getInitialFormValues();\n\n  if (\n    previewUrlResponse.error ||\n    documentLayoutResponse.error ||\n    !documentResponse.document ||\n    !documentResponse.meta ||\n    !documentResponse.schema ||\n    !initialValues\n  ) {\n    return <Page.Error />;\n  }\n\n  if (!previewUrlResponse.data?.data?.url) {\n    return <Page.NoData />;\n  }\n\n  const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);\n\n  const validateSync = (values: Record<string, unknown>, options: Record<string, string>) => {\n    const yupSchema = createYupSchema(\n      documentResponse.schema?.attributes,\n      documentResponse.components,\n      {\n        status: documentResponse.document?.status,\n        ...options,\n      }\n    );\n\n    return yupSchema.validateSync(values, { abortEarly: false });\n  };\n\n  const previewUrl = previewUrlResponse.data.data.url;\n\n  const onPreview = () => {\n    iframeRef?.current?.contentWindow?.postMessage(\n      { type: 'strapiUpdate' },\n      // The iframe origin is safe to use since it must be provided through the allowedOrigins config\n      new URL(iframeRef.current.src).origin\n    );\n  };\n\n  const hasAdvancedPreview = window.strapi.features.isEnabled('cms-advanced-preview');\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage(\n          {\n            id: 'content-manager.preview.page-title',\n            defaultMessage: '{contentType} preview',\n          },\n          {\n            contentType: documentTitle,\n          }\n        )}\n      </Page.Title>\n      <PreviewProvider\n        url={previewUrl}\n        document={documentResponse.document}\n        title={documentTitle}\n        meta={documentResponse.meta}\n        schema={documentResponse.schema}\n        layout={documentLayoutResponse.edit}\n        onPreview={onPreview}\n      >\n        <FormContext\n          method=\"PUT\"\n          disabled={\n            query.status === 'published' &&\n            documentResponse &&\n            documentResponse.document.status !== 'draft'\n          }\n          initialValues={documentResponse.getInitialFormValues()}\n          initialErrors={location?.state?.forceValidation ? validateSync(initialValues, {}) : {}}\n          height=\"100%\"\n          validate={(values: Record<string, unknown>, options: Record<string, string>) => {\n            const yupSchema = createYupSchema(\n              documentResponse.schema?.attributes,\n              documentResponse.components,\n              {\n                status: documentResponse.document?.status,\n                ...options,\n              }\n            );\n\n            return yupSchema.validate(values, { abortEarly: false });\n          }}\n        >\n          {({ resetForm }) => (\n            <Flex direction=\"column\" height=\"100%\" alignItems=\"stretch\">\n              <Blocker onProceed={resetForm} />\n              <PreviewHeader />\n              <Flex flex={1} overflow=\"auto\" alignItems=\"stretch\">\n                {hasAdvancedPreview && (\n                  <Box\n                    overflow=\"auto\"\n                    width={isSideEditorOpen ? '50%' : 0}\n                    borderWidth=\"0 1px 0 0\"\n                    borderColor=\"neutral150\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    // Remove horizontal padding when the editor is closed or it won't fully disappear\n                    paddingLeft={isSideEditorOpen ? 6 : 0}\n                    paddingRight={isSideEditorOpen ? 6 : 0}\n                    transition=\"all 0.2s ease-in-out\"\n                  >\n                    <FormLayout\n                      layout={documentLayoutResponse.edit.layout}\n                      document={documentResponse}\n                      hasBackground={false}\n                    />\n                  </Box>\n                )}\n                <Flex\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                  flex={1}\n                  height=\"100%\"\n                  overflow=\"hidden\"\n                >\n                  <Flex\n                    direction=\"row\"\n                    background=\"neutral0\"\n                    padding={2}\n                    borderWidth=\"0 0 1px 0\"\n                    borderColor=\"neutral150\"\n                  >\n                    {hasAdvancedPreview && (\n                      <IconButton\n                        variant=\"ghost\"\n                        label={formatMessage(\n                          isSideEditorOpen\n                            ? {\n                                id: 'content-manager.preview.content.close-editor',\n                                defaultMessage: 'Close editor',\n                              }\n                            : {\n                                id: 'content-manager.preview.content.open-editor',\n                                defaultMessage: 'Open editor',\n                              }\n                        )}\n                        onClick={() => setIsSideEditorOpen((prev) => !prev)}\n                      >\n                        <AnimatedArrow $isSideEditorOpen={isSideEditorOpen} />\n                      </IconButton>\n                    )}\n                    <Flex justifyContent=\"center\" flex={1}>\n                      <SingleSelect\n                        value={deviceName}\n                        onChange={(name) => setDeviceName(name.toString())}\n                        aria-label={formatMessage({\n                          id: 'content-manager.preview.device.select',\n                          defaultMessage: 'Select device type',\n                        })}\n                      >\n                        {DEVICES.map((deviceOption) => (\n                          <SingleSelectOption key={deviceOption.name} value={deviceOption.name}>\n                            {formatMessage(deviceOption.label)}\n                          </SingleSelectOption>\n                        ))}\n                      </SingleSelect>\n                    </Flex>\n                  </Flex>\n                  <Flex direction=\"column\" justifyContent=\"center\" background=\"neutral0\" flex={1}>\n                    <Box\n                      data-testid=\"preview-iframe\"\n                      ref={iframeRef}\n                      src={previewUrl}\n                      /**\n                       * For some reason, changing an iframe's src tag causes the browser to add a new item in the\n                       * history stack. This is an issue for us as it means clicking the back button will not let us\n                       * go back to the edit view. To fix it, we need to trick the browser into thinking this is a\n                       * different iframe when the preview URL changes. So we set a key prop to force React\n                       * to mount a different node when the src changes.\n                       */\n                      key={previewUrl}\n                      title={formatMessage({\n                        id: 'content-manager.preview.panel.title',\n                        defaultMessage: 'Preview',\n                      })}\n                      width={device.width}\n                      height={device.height}\n                      borderWidth={0}\n                      tag=\"iframe\"\n                    />\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Flex>\n          )}\n        </FormContext>\n      </PreviewProvider>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedPreviewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedPreviewPageImpl = () => {\n  const { slug: model } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC([\n    { action: 'plugin::content-manager.explorer.read', subject: model },\n    { action: 'plugin::content-manager.explorer.update', subject: model },\n    { action: 'plugin::content-manager.explorer.publish', subject: model },\n  ]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !model) {\n    return (\n      <Box\n        height=\"100vh\"\n        width=\"100vw\"\n        position=\"fixed\"\n        top={0}\n        left={0}\n        zIndex={2}\n        background=\"neutral0\"\n      >\n        <Page.Error />\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      height=\"100vh\"\n      width=\"100vw\"\n      position=\"fixed\"\n      top={0}\n      left={0}\n      zIndex={2}\n      background=\"neutral0\"\n    >\n      <Page.Protect\n        permissions={permissions.filter((permission) =>\n          permission.action.includes('explorer.read')\n        )}\n      >\n        <DocumentRBAC permissions={permissions}>\n          <PreviewPage />\n        </DocumentRBAC>\n      </Page.Protect>\n    </Box>\n  );\n};\n\nconst ProtectedPreviewPage = () => {\n  return (\n    <Portal>\n      <FocusTrap>\n        <ProtectedPreviewPageImpl />\n      </FocusTrap>\n    </Portal>\n  );\n};\n\nexport { ProtectedPreviewPage, usePreviewContext };\n"],"names":["DEVICES","name","label","id","defaultMessage","width","height","PreviewProvider","usePreviewContext","createContext","AnimatedArrow","styled","ArrowLineLeft","props","$isSideEditorOpen","PreviewPage","location","useLocation","formatMessage","useIntl","iframeRef","React","useRef","isSideEditorOpen","setIsSideEditorOpen","useState","slug","model","documentId","collectionType","useParams","query","useQueryParams","params","useMemo","buildValidParams","deviceName","setDeviceName","device","find","d","Error","COLLECTION_TYPES","previewUrlResponse","useGetPreviewUrlQuery","contentType","locale","status","documentResponse","useDocument","documentLayoutResponse","useDocumentLayout","isLoading","_jsx","Page","Loading","initialValues","getInitialFormValues","error","document","meta","schema","data","url","NoData","documentTitle","getTitle","edit","settings","mainField","validateSync","values","options","yupSchema","createYupSchema","attributes","components","abortEarly","previewUrl","onPreview","current","contentWindow","postMessage","type","URL","src","origin","hasAdvancedPreview","window","strapi","features","isEnabled","_jsxs","_Fragment","Title","title","layout","FormContext","method","disabled","initialErrors","state","forceValidation","validate","resetForm","Flex","direction","alignItems","Blocker","onProceed","PreviewHeader","flex","overflow","Box","borderWidth","borderColor","paddingTop","paddingBottom","paddingLeft","paddingRight","transition","FormLayout","hasBackground","background","padding","IconButton","variant","onClick","prev","justifyContent","SingleSelect","value","onChange","toString","aria-label","map","deviceOption","SingleSelectOption","data-testid","ref","tag","ProtectedPreviewPageImpl","permissions","useRBAC","action","subject","position","top","left","zIndex","Protect","filter","permission","includes","DocumentRBAC","ProtectedPreviewPage","Portal","FocusTrap"],"mappings":"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"}